import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { useToast } from '@/components/ui/use-toast';
import { ToastAction } from '@/components/ui/toast';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from "@/components/ui/pagination";

function FileUploadAndExportComponent() {
  const [showExportOptions, setShowExportOptions] = useState(false);
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 5;

  const handleDownloadClick = () => {
    setIsDialogOpen(true);
  };

  const handleDialogClose = () => {
    setIsDialogOpen(false);
  };

  const students = [
    { sNo: 1, name: 'John Doe', contact: '123-456-7890', email: 'john.doe@example.com', organization: 'ABC Corp', program: 'MBA', course: 'Finance', gender: 'Male' },
    { sNo: 2, name: 'Jane Smith', contact: '987-654-3210', email: 'jane.smith@example.com', organization: 'XYZ Ltd', program: 'B.Tech', course: 'Computer Science', gender: 'Female' },
    { sNo: 3, name: 'Alice Johnson', contact: '456-789-1234', email: 'alice.johnson@example.com', organization: 'ABC Corp', program: 'MBA', course: 'Marketing', gender: 'Female' },
    { sNo: 4, name: 'Bob Brown', contact: '321-654-9870', email: 'bob.brown@example.com', organization: 'XYZ Ltd', program: 'BBA', course: 'HR', gender: 'Male' },
    { sNo: 5, name: 'Charlie White', contact: '789-123-4567', email: 'charlie.white@example.com', organization: 'DEF Inc', program: 'M.Tech', course: 'Civil Engineering', gender: 'Male' },
    { sNo: 6, name: 'Bob Brown', contact: '321-654-9870', email: 'bob.brown@example.com', organization: 'XYZ Ltd', program: 'BBA', course: 'HR', gender: 'Male' },
    { sNo: 7, name: 'Charlie White', contact: '789-123-4567', email: 'charlie.white@example.com', organization: 'DEF Inc', program: 'M.Tech', course: 'Civil Engineering', gender: 'Male' },
    { sNo: 8, name: 'Bob Brown', contact: '321-654-9870', email: 'bob.brown@example.com', organization: 'XYZ Ltd', program: 'BBA', course: 'HR', gender: 'Male' },
    { sNo: 9, name: 'Charlie White', contact: '789-123-4567', email: 'charlie.white@example.com', organization: 'DEF Inc', program: 'M.Tech', course: 'Civil Engineering', gender: 'Male' },
    { sNo: 10, name: 'Bob Brown', contact: '321-654-9870', email: 'bob.brown@example.com', organization: 'XYZ Ltd', program: 'BBA', course: 'HR', gender: 'Male' },
    { sNo: 11, name: 'Charlie White', contact: '789-123-4567', email: 'charlie.white@example.com', organization: 'DEF Inc', program: 'M.Tech', course: 'Civil Engineering', gender: 'Male' },
  ];

  const totalPages = Math.ceil(students.length / itemsPerPage);

  const handlePageChange = (page) => {
    setCurrentPage(page);
  };

  const paginatedData = students.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage);

  const renderPageNumbers = () => {
    const pageNumbers = [];
    if (totalPages <= 5) {
      for (let i = 1; i <= totalPages; i++) {
        pageNumbers.push(
          <PaginationItem key={i}>
            <PaginationLink href="#" isActive={currentPage === i} onClick={() => handlePageChange(i)}>
              {i}
            </PaginationLink>
          </PaginationItem>
        );
      }
    } else {
      pageNumbers.push(
        <PaginationItem key={1}>
          <PaginationLink href="#" isActive={currentPage === 1} onClick={() => handlePageChange(1)}>
            1
          </PaginationLink>
        </PaginationItem>
      );
      if (currentPage > 3) {
        pageNumbers.push(<PaginationEllipsis key="ellipsis1" />);
      }
      if (currentPage > 2) {
        pageNumbers.push(
          <PaginationItem key={currentPage - 1}>
            <PaginationLink href="#" isActive={false} onClick={() => handlePageChange(currentPage - 1)}>
              {currentPage - 1}
            </PaginationLink>
          </PaginationItem>
        );
      }
      pageNumbers.push(
        <PaginationItem key={currentPage}>
          <PaginationLink href="#" isActive={true} onClick={() => handlePageChange(currentPage)}>
            {currentPage}
          </PaginationLink>
        </PaginationItem>
      );
      if (currentPage < totalPages - 1) {
        pageNumbers.push(
          <PaginationItem key={currentPage + 1}>
            <PaginationLink href="#" isActive={false} onClick={() => handlePageChange(currentPage + 1)}>
              {currentPage + 1}
            </PaginationLink>
          </PaginationItem>
        );
      }
      if (currentPage < totalPages - 2) {
        pageNumbers.push(<PaginationEllipsis key="ellipsis2" />);
      }
      pageNumbers.push(
        <PaginationItem key={totalPages}>
          <PaginationLink href="#" isActive={currentPage === totalPages} onClick={() => handlePageChange(totalPages)}>
            {totalPages}
          </PaginationLink>
        </PaginationItem>
      );
    }
    return pageNumbers;
  };

  return (
    <div className="tw-p-4 tw-overflow-x-auto">
      {/* First Card: Data Type, Select Actions, and Upload File */}
      <Card className="tw-mb-6 ">
        <CardContent>
          <div className="tw-flex tw-items-center tw-space-x-6 tw-w-full tw-h-auto tw-mb-6 tw-mt-6">
            <div className="tw-flex tw-flex-col">
              <label htmlFor="dataType" className="tw-text-gray-700 tw-font-medium">Data Type</label>
              <select id="dataType" className="tw-mt-1 tw-h-[30px] tw-px-3 tw-border tw-border-gray-300 tw-rounded-md">
                <option value="students">Students</option>
                {/* Add more options as needed */}
              </select>
            </div>
            <div className="tw-flex tw-flex-col tw-space-y-2 tw-mr-4">
              <h2 className="tw-font-medium">Select Actions</h2>
              <div className="tw-flex tw-space-x-2 ">
                <Button variant="outline" className="tw-h-[30px] tw-w-auto tw-px-4 tw-bg-white">Bulk Import</Button>
                <Button variant="outline" className="tw-h-[30px] tw-w-auto tw-px-4 tw-bg-white" onClick={() => setShowExportOptions(true)}>Bulk Export</Button>
                <Button variant="outline" className="tw-h-[30px] tw-w-auto tw-px-4 tw-bg-white">Bulk Update</Button>
              </div>
            </div>
            <div className="tw-flex tw-flex-col tw-items-start tw-mt-4">
              <small className="tw-text-gray-500">Only CSV format is allowed</small>
              <div className="tw-flex tw-items-center tw-mt-2">
                <input type="checkbox" id="firstRow" className="tw-form-checkbox tw-text-blue-500" />
                <label htmlFor="firstRow" className="tw-ml-2 tw-text-gray-700">First rows contain column names</label>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Second Card: Download, Filter Options, Table, and Pagination */}
      {showExportOptions && (
        <div className='tw-w-[1100px] tw-h-[643px]'>
          <Card className="tw-mb-2  tw-w-[1200px] tw-h-[643px]">
            <CardContent>
              <div className="tw-mt-6 tw-w-full tw-h-auto">

                <div className="tw-flex tw-items-center tw-justify-between tw-mb-4 tw-mt-4">
                  <Button variant="outline" className="tw-h-[30px] tw-w-auto tw-px-4 tw-bg-blue-800 tw-text-white" onClick={handleDownloadClick}>
                    Download
                  </Button>
                  <div className="tw-flex tw-items-center tw-space-x-4">
                    <Select>
                      <SelectTrigger className="tw-h-[30px] tw-w-[153px] tw-px-3 tw-border tw-border-gray-300 tw-rounded-md focus:tw-border-gray-300 tw-bg-white">
                        <SelectValue placeholder="Filter" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="filter">Filter</SelectItem>
                        <SelectItem value="organization">Organization</SelectItem>
                        <SelectItem value="roles">Roles</SelectItem>
                        <SelectItem value="status">Status</SelectItem>
                        <SelectItem value="user-id">User ID</SelectItem>
                        {/* Add more options as needed */}
                      </SelectContent>
                    </Select>
                    <Select>
                      <SelectTrigger className="tw-h-[30px] tw-w-[93px] tw-px-3 tw-border tw-border-gray-300 tw-rounded-md focus:tw-border-gray-300 tw-bg-white">
                        <SelectValue placeholder="Condition" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="contains">Contains</SelectItem>
                        <SelectItem value="equals-to">Equals to</SelectItem>
                        <SelectItem value="starts-with">Starts with</SelectItem>
                      </SelectContent>
                    </Select>
                    <input type="text" placeholder="Write" className="tw-h-[30px] tw-w-[173px] tw-px-3 tw-border tw-border-gray-300 tw-rounded-md" />
                  </div>
                </div>

                <p className="tw-mb-4 tw-text-gray-700">
                  Please review the field each column has matched to. Then click "Validate Data" to check the data for errors.
                </p>

                {/* Table */}
                <div className="tw-bg-white tw-shadow-md tw-rounded-md tw-overflow-x-auto">
                  <Table className="tw-min-w-full tw-border-collapse  tw-w-[946px] tw-h-[410px]">
                    <TableHeader>
                      <TableRow className="tw-bg-[#EAE3CB] ">
                           
                         <TableHead className="tw-border tw-border-black tw-px-4 tw-py-2 tw-font-bold">S.No</TableHead> 
                        <TableHead className="tw-border tw-border-black tw-px-4 tw-py-2 tw-font-bold">Student Name</TableHead>
                        <TableHead className="tw-border tw-border-black tw-px-4 tw-py-2 tw-font-bold">Contact</TableHead>
                        <TableHead className="tw-border tw-border-black tw-px-4 tw-py-2 tw-font-bold">Email ID</TableHead>
                        <TableHead className="tw-border tw-border-black tw-px-4 tw-py-2 tw-font-bold">Organization</TableHead>
                        <TableHead className="tw-border tw-border-black tw-px-4 tw-py-2 tw-font-bold">Program</TableHead>
                        <TableHead className="tw-border tw-border-black tw-px-4 tw-py-2 tw-font-bold">Course</TableHead>
                        <TableHead className="tw-border tw-border-black tw-px-4 tw-py-2 tw-font-bold">Gender</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody className="tw-bg-[#EAE3CB]  tw-h-[20px]" >
                      {paginatedData.map((student, index) => (
                        <TableRow key={index} className="tw-border tw-border-black ">
                          <TableCell className="tw-border tw-border-black tw-px-4 tw-py-2 tw-font-medium">{student.sNo}</TableCell>
                          <TableCell className="tw-border tw-border-black tw-px-4 tw-py-2 tw-font-medium">{student.name}</TableCell>
                          <TableCell className="tw-border tw-border-black tw-px-4 tw-py-2 tw-font-medium">{student.contact}</TableCell>
                          <TableCell className="tw-border tw-border-black tw-px-4 tw-py-2 tw-font-medium">{student.email}</TableCell>
                          <TableCell className="tw-border tw-border-black tw-px-4 tw-py-2 tw-font-medium">{student.organization}</TableCell>
                          <TableCell className="tw-border tw-border-black tw-px-4 tw-py-2 tw-font-medium">{student.program}</TableCell>
                          <TableCell className="tw-border tw-border-black tw-px-4 tw-py-2 tw-font-medium">{student.course}</TableCell>
                          <TableCell className="tw-border tw-border-black tw-px-4 tw-py-2 tw-font-medium">{student.gender}</TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </div>

                <div className="tw-flex tw-items-center tw-justify-between tw-px-4 tw-py-2 tw-rounded-md">
                  <div className="tw-font-medium tw-text-sm">
                    Page <span className="tw-font-bold">{currentPage}</span>
                  </div>
                  <div className="tw-flex tw-items-center tw-space-x-2 tw-overflow-x-auto">
                    <Pagination className="tw-flex tw-items-center tw-space-x-2">
                      <PaginationContent className="tw-flex tw-items-center tw-space-x-1">
                        <PaginationItem>
                          <PaginationPrevious href="#" onClick={() => handlePageChange(currentPage > 1 ? currentPage - 1 : 1)} />
                        </PaginationItem>
                        {renderPageNumbers()}
                        <PaginationItem>
                          <PaginationNext href="#" onClick={() => handlePageChange(currentPage < totalPages ? currentPage + 1 : totalPages)} />
                        </PaginationItem>
                      </PaginationContent>
                    </Pagination>
                  </div>
                </div>


                

                {/* Alert Dialog */}
                <AlertDialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
                  <AlertDialogContent 
                    className="tw-fixed tw-top-1/2 tw-left-1/2 tw-transform tw--translate-x-1/2 tw--translate-y-1/2 tw-w-[320px] tw-h-[228px] tw-rounded-[4px] tw-p-4 tw-bg-white tw-shadow-lg"
                  >  
                    <div className="flex flex-col justify-center items-center tw-h-full">
                      <img src="/11.png" className="tw-w-60 h-61 mb-4" alt="Description" />
                      <div className=' tw-ml-2'>
                        <AlertDialogFooter className="tw-flex tw-justify-center tw-items-center tw-w-full tw-pt-4 tw-text-center">
                          <AlertDialogAction
                            onClick={handleDialogClose}
                            className="tw-bg-blue-900 tw-text-white tw-text-center tw-w-[200px] tw-h-[30px] tw-px-5 tw-py-5 tw-rounded-md tw-shadow-md"
                          >
                            Continue
                          </AlertDialogAction>
                        </AlertDialogFooter>
                      </div>
                    </div>
                  </AlertDialogContent>
                </AlertDialog>

              </div>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  );
}

export default FileUploadAndExportComponent;
