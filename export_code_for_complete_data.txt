import React, { useState, useMemo } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { X, CircleCheck ,ChevronsUpDown} from 'lucide-react';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
  AlertDialogCancel,
} from '@/components/ui/alert-dialog';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from '@/components/ui/pagination';

function FileUploadAndExportComponent() {
  const [showExportOptions, setShowExportOptions] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 5;

  // State for filters
  const [filterType, setFilterType] = useState('name');
  const [filterValue, setFilterValue] = useState('contains');
  const [searchTerm, setSearchTerm] = useState('');

  const [isDialogOpen, setIsDialogOpen] = useState(false);



  const handleDialogClose = () => {
    setIsDialogOpen(false);
  };
 
  const students = [
    { sNo: 1, name: 'John Doe', contact: '123-456-7890', email: 'john.doe@example.com', organization: 'ABC Corp', program: 'MBA', course: 'Finance', gender: 'Male' },
    { sNo: 2, name: 'Jane Smith', contact: '987-654-3210', email: 'jane.smith@example.com', organization: 'XYZ Ltd', program: 'B.Tech', course: 'Computer Science', gender: 'Female' },
    { sNo: 3, name: 'Alice Johnson', contact: '456-789-1234', email: 'alice.johnson@example.com', organization: 'ABC Corp', program: 'MBA', course: 'Marketing', gender: 'Female' },

    { sNo: 4, name: 'Bob Brown', contact: '321-654-9870', email: 'bob.brown@example.com', organization: 'XYZ Ltd', program: 'BBA', course: 'HR', gender: 'Male' },
    { sNo: 5, name: 'Charlie White', contact: '789-123-4567', email: 'charlie.white@example.com', organization: 'DEF Inc', program: 'M.Tech', course: 'Civil Engineering', gender: 'Male' },
    { sNo: 6, name: 'Bob Brown', contact: '321-654-9870', email: 'bob.brown@example.com', organization: 'XYZ Ltd', program: 'BBA', course: 'HR', gender: 'Male' },
    { sNo: 7, name: 'Charlie White', contact: '789-123-4567', email: 'charlie.white@example.com', organization: 'DEF Inc', program: 'M.Tech', course: 'Civil Engineering', gender: 'Male' },
    { sNo: 8, name: 'Bob Brown', contact: '321-654-9870', email: 'bob.brown@example.com', organization: 'XYZ Ltd', program: 'BBA', course: 'HR', gender: 'Male' },
    { sNo: 9, name: 'Charlie White', contact: '789-123-4567', email: 'charlie.white@example.com', organization: 'DEF Inc', program: 'M.Tech', course: 'Civil Engineering', gender: 'Male' },
    { sNo: 10, name: 'Bob Brown', contact: '321-654-9870', email: 'bob.brown@example.com', organization: 'XYZ Ltd', program: 'BBA', course: 'HR', gender: 'Male' },
    { sNo: 11, name: 'Charlie White', contact: '789-123-4567', email: 'charlie.white@example.com', organization: 'DEF Inc', program: 'M.Tech', course: 'Civil Engineering', gender: 'Male' },
    { sNo: 12, name: 'Charlie White', contact: '789-123-4567', email: 'charlie.white@example.com', organization: 'DEF Inc', program: 'M.Tech', course: 'Civil Engineering', gender: 'Male' },
    { sNo: 13, name: 'Bob Brown', contact: '321-654-9870', email: 'bob.brown@example.com', organization: 'XYZ Ltd', program: 'BBA', course: 'HR', gender: 'Male' },
    { sNo: 14, name: 'Charlie White', contact: '789-123-4567', email: 'charlie.white@example.com', organization: 'DEF Inc', program: 'M.Tech', course: 'Civil Engineering', gender: 'Male' },
    { sNo: 15, name: 'Bob Brown', contact: '321-654-9870', email: 'bob.brown@example.com', organization: 'XYZ Ltd', program: 'BBA', course: 'HR', gender: 'Male' },
    { sNo: 16, name: 'Charlie White', contact: '789-123-4567', email: 'charlie.white@example.com', organization: 'DEF Inc', program: 'M.Tech', course: 'Civil Engineering', gender: 'Male' },
    { sNo: 17, name: 'Charlie White', contact: '789-123-4567', email: 'charlie.white@example.com', organization: 'DEF Inc', program: 'M.Tech', course: 'Civil Engineering', gender: 'Male' },
    { sNo: 18, name: 'Bob Brown', contact: '321-654-9870', email: 'bob.brown@example.com', organization: 'XYZ Ltd', program: 'BBA', course: 'HR', gender: 'Male' },
    { sNo: 19, name: 'Charlie White', contact: '789-123-4567', email: 'charlie.white@example.com', organization: 'DEF Inc', program: 'M.Tech', course: 'Civil Engineering', gender: 'Male' },
    { sNo: 20, name: 'Bob Brown', contact: '321-654-9870', email: 'bob.brown@example.com', organization: 'XYZ Ltd', program: 'BBA', course: 'HR', gender: 'Male' },
    { sNo: 21, name: 'Charlie White', contact: '789-123-4567', email: 'charlie.white@example.com', organization: 'DEF Inc', program: 'M.Tech', course: 'Civil Engineering', gender: 'Male' },
  ];

  // Apply filters and search term
  const filteredStudents = useMemo(() => {
    let filtered = students;

    // Apply search term filter
    if (searchTerm) {
      filtered = filtered.filter(student => {
        const valueToCheck = student[filterType] || '';
        switch (filterValue) {
          case 'contains':
            return valueToCheck.toLowerCase().includes(searchTerm.toLowerCase());
          case 'equals-to':
            return valueToCheck.toLowerCase() === searchTerm.toLowerCase();
          case 'starts-with':
            return valueToCheck.toLowerCase().startsWith(searchTerm.toLowerCase());
          default:
            return true;
        }
      });
    }

    return filtered;
  }, [students, filterType, filterValue, searchTerm]);

  const totalPages = Math.ceil(filteredStudents.length / itemsPerPage);

  const handlePageChange = (page) => {
    setCurrentPage(page);
  };
  
  const paginatedData = filteredStudents.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage);
  const tableHeight = Math.max(Math.min(paginatedData.length * 60, 480), 60);
  console.log('Calculated Table Height:', tableHeight);


  //  dowload 
  
  const handleDownloadClick = () => {
    const csvData = generateCSV(students);
    downloadCSV(csvData, 'students_data.csv');
    setIsDialogOpen(true);
  };

  const generateCSV = (data) => {
    const headers = ['S.No', 'Name', 'Contact', 'Email', 'Organization', 'Program', 'Course', 'Gender'];
    const rows = data.map(student => [
      student.sNo, student.name, student.contact, student.email, 
      student.organization, student.program, student.course, student.gender
    ]);

    let csvContent = headers.join(',') + '\n';
    csvContent += rows.map(row => row.join(',')).join('\n');
    return csvContent;
  };

  const downloadCSV = (csvContent, fileName) => {
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.setAttribute('download', fileName);
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };





  

  const renderPageNumbers = () => {
    const pageNumbers = [];
    if (totalPages <= 5) {
      for (let i = 1; i <= totalPages; i++) {
        pageNumbers.push(
          <PaginationItem key={i}>
            <PaginationLink href="#" isActive={currentPage === i} onClick={() => handlePageChange(i)}>
              {i}
            </PaginationLink>
          </PaginationItem>
        );
      }
    } else {
      pageNumbers.push(
        <PaginationItem key={1}>
          <PaginationLink href="#" isActive={currentPage === 1} onClick={() => handlePageChange(1)}>
            1
          </PaginationLink>
        </PaginationItem>
      );
      if (currentPage > 3) {
        pageNumbers.push(<PaginationEllipsis key="ellipsis1" />);
      }
      if (currentPage > 2) {
        pageNumbers.push(
          <PaginationItem key={currentPage - 1}>
            <PaginationLink href="#" isActive={false} onClick={() => handlePageChange(currentPage - 1)}>
              {currentPage - 1}
            </PaginationLink>
          </PaginationItem>
        );
      }
      pageNumbers.push(
        <PaginationItem key={currentPage}>
          <PaginationLink href="#" isActive={true} onClick={() => handlePageChange(currentPage)}>
            {currentPage}
          </PaginationLink>
        </PaginationItem>
      );
      if (currentPage < totalPages - 1) {
        pageNumbers.push(
          <PaginationItem key={currentPage + 1}>
            <PaginationLink href="#" isActive={false} onClick={() => handlePageChange(currentPage + 1)}>
              {currentPage + 1}
            </PaginationLink>
          </PaginationItem>
        );
      }
      if (currentPage < totalPages - 2) {
        pageNumbers.push(<PaginationEllipsis key="ellipsis2" />);
      }
      pageNumbers.push(
        <PaginationItem key={totalPages}>
          <PaginationLink href="#" isActive={currentPage === totalPages} onClick={() => handlePageChange(totalPages)}>
            {totalPages}
          </PaginationLink>
        </PaginationItem>
      );
    }
    return pageNumbers;
  };

  
  return (
    <div className="tw-p-4 tw-overflow-x-auto">
      {/* First Card: Data Type, Select Actions, and Upload File */}
      <Card className="tw-mb-6">
        <CardContent>
          <div className="tw-flex tw-items-center tw-space-x-6 tw-w-full tw-h-auto tw-mb-6 tw-mt-6">
            <div className="tw-flex tw-flex-col">
              <label htmlFor="dataType" className="tw-text-gray-700 tw-font-medium">Data Type</label>
              <select id="dataType" className="tw-mt-1 tw-h-[30px] tw-px-3 tw-rounded-md tw-border tw-border-blue-900 tw-text-blue-900">
                <option value="students">Students</option>
                {/* Add more options as needed */}
              </select>
            </div>
            <div className="tw-flex tw-flex-col tw-space-y-2 tw-mr-4">
              <h2 className="tw-font-medium">Select Actions</h2>
              <div className="tw-flex tw-space-x-2">
                <Button variant="outline" className="tw-h-[30px] tw-w-auto tw-px-4 tw-bg-white tw-border tw-border-blue-950 tw-text-blue-950">Bulk Import</Button>
                <Button variant="outline" className="tw-h-[30px] tw-w-auto tw-px-4 tw-bg-white tw-border tw-border-blue-950 tw-text-blue-950" onClick={() => setShowExportOptions(true)}>Bulk Export</Button>
                <Button variant="outline" className="tw-h-[30px] tw-w-auto tw-px-4 tw-bg-white tw-border tw-border-blue-950 tw-text-blue-950">Bulk Update</Button>
              </div>
            </div>
            <div className="tw-flex tw-flex-col tw-items-start tw-mt-4">
              <small className="tw-text-gray-500">File will be downloaded in CSV  format </small>
              <div className="tw-flex tw-items-center tw-mt-2">
                <input type="checkbox" id="firstRow" className="tw-form-checkbox tw-text-blue-500" />
                <label htmlFor="firstRow" className="tw-ml-2 tw-text-gray-700">First rows contain column names</label>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Second Card: Download, Filter Options, Table, and Pagination */}
      {showExportOptions && (
        <div className='tw-w-[1100px] tw-h-[610px]'>
          <Card className="tw-mb-2 tw-w-[1185px] tw-h-[620px]">
            <CardContent>
              <div className="tw-flex tw-items-center tw-justify-between tw-mb-4 tw-mt-4">
                <div>
                <Button 
        variant="outline" 
        className="tw-h-[30px] tw-w-auto tw-px-4 tw-bg-blue-800 tw-text-white tw-border tw-border-blue-900" 
        onClick={handleDownloadClick}
      >
        Download
      </Button>

      <AlertDialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
        <AlertDialogTrigger asChild>
          {/* Optional trigger component */}
        </AlertDialogTrigger>
        <AlertDialogContent className="tw-w-[335px] tw-h-[228px] tw-box-border">
          <div className="tw-absolute tw-top-0 tw-right-0 tw-p-2">
            <AlertDialogCancel className="!tw-ring-[-2] hover:!tw-bg-none">
              <X className="tw-w-[15px] tw-h-[15px]" />
            </AlertDialogCancel>
          </div>
          <AlertDialogHeader className="tw-text-center">
            <div className="tw-text-green-500 tw-flex tw-justify-center">
              <CircleCheck className="tw-w-[66px] tw-h-[50px]" />
            </div>
            <div className="tw-flex tw-justify-center tw-mb-8">
              <AlertDialogTitle>
                <span className="tw-font-montserrat tw-font-semibold tw-text-[14px] tw-leading-[19.5px] tw-text-center">
                  Completed
                </span>
              </AlertDialogTitle>
            </div>
          </AlertDialogHeader>
          <AlertDialogDescription>
            <div className="tw-flex tw-flex-col tw-mt-15 tw-px-6 tw-py-2 !tw-border-primary tw-w-full tw-rounded-[10px] tw-whitespace-nowrap">
              Your file has been downloaded successfully.
            </div>
          </AlertDialogDescription>
          <div className="tw-flex tw-justify-center tw-mb-20">
            <Button className="tw-bg-primary tw-w-[150px] tw-rounded tw-text-white">
              Continue
            </Button>
          </div>
        </AlertDialogContent>
      </AlertDialog>


                </div>


                <div className="tw-flex tw-items-center tw-space-x-4">
                  <div className="tw-w-[140px] tw-h-[30px] tw-px-3 tw-border tw-rounded-md  tw-bg-white tw-border-blue-900 tw-text-blue-900">
                    <Select value={filterType} onValueChange={(value) => setFilterType(value)}>
                      <SelectTrigger className="tw-w-full tw-h-full tw-bg-transparent tw-border-none">
                        <SelectValue placeholder="Filter" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="name">Name</SelectItem>
                        <SelectItem value="contact">Contact</SelectItem>
                        <SelectItem value="email">Email</SelectItem>
                        <SelectItem value="organization">Organization</SelectItem>
                        <SelectItem value="program">Program</SelectItem>
                        <SelectItem value="course">Course</SelectItem>
                        <SelectItem value="gender">Gender</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="tw-w-[120px] tw-h-[30px] tw-px-3 tw-border tw-rounded-md focus:tw-border-gray-300 tw-bg-white tw-border-blue-900 tw-text-blue-900">
                    <Select value={filterValue} onValueChange={(value) => setFilterValue(value)}>
                      <SelectTrigger className="tw-w-full tw-h-full tw-bg-transparent tw-border-none">
                        <SelectValue placeholder="Filter Value" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="contains">Contains</SelectItem>
                        <SelectItem value="equals-to">Equals To</SelectItem>
                        <SelectItem value="starts-with">Starts With</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <input
                    type="text"
                    placeholder="Write"
                    className="tw-h-[30px] tw-w-[200px] tw-px-2 tw-border tw-border-blue-900 tw-text-blue-900 tw-rounded-md"
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                  />
                </div>
              </div>
              <p className="tw-mb-4 tw-text-gray-700 tw-text-[10px]">
                  Please review the field each column has matched to. Then click "Validate Data" to check the data for errors.
                </p>

                {/* Table */}
                {/* Table */}
              <div className="tw-bg-white tw-shadow-md tw-rounded-md overflow-hidden">
                <Table style={{ height: tableHeight }} >
                  <TableHeader>
                  <TableRow className="tw-bg-[#FFFAED]   ">
                           
                           <TableHead className="tw-border tw-border-[#E8DDB7] tw-px-4 tw-py-2  tw-text-bold  tw-text-black tw-font-semibold">
                              <div className="tw-flex tw-items-center">
                               S.No
                              </div>
                          </TableHead>
                          <TableHead className="tw-border tw-border-[#E8DDB7] tw-px-4 tw-py-2  tw-whitespace-nowrap tw-text-black tw-font-semibold">
                         <div className="tw-flex tw-items-center">
                        Student Name<ChevronsUpDown className="tw-w-4 tw-h-4 tw-ml-2 tw-text-black" />
                      </div>
                     </TableHead>
   
   
             <TableHead className="tw-border tw-border-[#E8DDB7] tw-px-4 tw-py-2  tw-text-black tw-font-semibold">
               <div className="tw-flex tw-items-center">
                 Contact <ChevronsUpDown className="tw-w-7 tw-h-4 tw-ml-2 tw-text-black" />
               </div>
             </TableHead>
             <TableHead className="tw-border tw-border-[#E8DDB7] tw-px-4 tw-py-2 tw-text-black tw-font-semibold">
               <div className="tw-flex tw-items-center">
                 Email ID <ChevronsUpDown className="tw-w-7 tw-h-4 tw-ml-2 tw-text-black" />
               </div>
             </TableHead>
             <TableHead className="tw-border tw-border-[#E8DDB7] tw-px-4 tw-py-2  tw-text-black tw-font-semibold">
               <div className="tw-flex tw-items-center">
                 Organization <ChevronsUpDown className="tw-w-7 tw-h-4 tw-ml-2 tw-text-black" />
               </div>
             </TableHead>
             <TableHead className="tw-border tw-border-[#E8DDB7] tw-px-4 tw-py-2  tw-text-black tw-font-semibold">
               <div className="tw-flex tw-items-center">
                 Program <ChevronsUpDown className="tw-w-7 tw-h-4 tw-ml- tw-text-black" />
               </div>
             </TableHead>
             <TableHead className="tw-border tw-border-[#E8DDB7] tw-px-4 tw-py-2 tw-text-black tw-font-semibold">
               <div className="tw-flex tw-items-center">
                 Course <ChevronsUpDown className="tw-w-7 tw-h-4 tw-ml-2 tw-text-black" />
               </div>
             </TableHead>
             <TableHead className="tw-border tw-border-[#E8DDB7] tw-px-4 tw-py-2 tw-text-black tw-font-semibold">
               <div className="tw-flex tw-items-center">
                 Gender <ChevronsUpDown className="tw-w-7 tw-h-4 tw-ml-2 tw-text-black" />
               </div>
             </TableHead>
                         </TableRow>
                  </TableHeader>


                  
                  <TableBody>
                    {paginatedData.map((student, index) => (
                      <TableRow key={index}  className="tw-border  tw-bg-[#FFFAED]  tw-h-[75px]  ">
                         <TableCell className="tw-border tw-border-[#E8DDB7] tw-px-4 tw-py-2">{student.sNo}</TableCell>
                        <TableCell className="tw-border tw-border-[#E8DDB7] tw-px-4 tw-py-2">{student.name}</TableCell>
                        <TableCell className="tw-border tw-border-[#E8DDB7] tw-px-4 tw-py-2">{student.contact}</TableCell>
                        <TableCell className="tw-border tw-border-[#E8DDB7] tw-px-4 tw-py-2">{student.email}</TableCell>
                        <TableCell className="tw-border tw-border-[#E8DDB7] tw-px-4 tw-py-2">{student.organization}</TableCell>
                        <TableCell className="tw-border tw-border-[#E8DDB7] tw-px-4 tw-py-2">{student.program}</TableCell>
                        <TableCell className="tw-border tw-border-[#E8DDB7] tw-px-4 tw-py-2">{student.course}</TableCell>
                        <TableCell className="tw-border tw-border-[#E8DDB7] tw-px-4 tw-py-2">{student.gender}</TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </div>

           
              <div className="tw-flex tw-justify-between tw-items-center tw-w-[1150px] tw-h-[45px] tw-top-[409px] tw-left-[2px] tw-p-[15px_5px_0_5px] tw-gap-[711px] tw-opacity-100">
        <div className="tw-text-gray-700 tw-w-[61px] tw-h-[30px] tw-gap-[25px]">
          <span className="tw-mr-4">Page</span>
          {currentPage}
        </div>
        <div className="tw-flex tw-items-center tw-space-x-2">
          <Pagination className="tw-flex tw-items-center tw-space-x-2">
            <PaginationContent className="tw-flex tw-items-center tw-space-x-1">
              <PaginationItem>
                <PaginationPrevious
                  className="tw-px-3 tw-py-1"
                  onClick={() =>
                    setCurrentPage((prev) => Math.max(prev - 1, 1))
                  }
                />
              </PaginationItem>
              {(() => {
                const pageNumbers = [];
                if (totalPages <= 4) {
                  for (let i = 1; i <= totalPages; i++) {
                    pageNumbers.push(i);
                  }
                } else {
                  if (currentPage <= 2) {
                    pageNumbers.push(1, 2, "...", totalPages);
                  } else if (currentPage >= totalPages - 1) {
                    pageNumbers.push(1, totalPages - 1, totalPages);
                  } else {
                    pageNumbers.push(1, currentPage, "...", totalPages);
                  }
                }
                return pageNumbers;
              })().map((page, index) => (
                <PaginationItem key={index}>
                  {page === "..." ? (
                    <span className="tw-px-3 tw-py-1">...</span>
                  ) : (
                    <PaginationLink
                      className={`tw-px-3 tw-py-1 ${
                        currentPage === page
                          ? "tw-bg-gray-200 tw-font-bold tw-text-black"
                          : ""
                      }`}
                      onClick={() => setCurrentPage(page)}
                    >
                      {page}
                    </PaginationLink>
                  )}
                </PaginationItem>
              ))}
              <PaginationItem>
                <PaginationNext
                  className="tw-px-3 tw-py-1"
                  onClick={() =>
                    setCurrentPage((prev) => Math.min(prev + 1, totalPages))
                  }
                />
              </PaginationItem>
            </PaginationContent>
          </Pagination>
        </div>

    </div>
         <p className="tw-mb-4  tw-text-[#1D1F71]">
          Total record generated is 200
          </p>
            </CardContent>
          </Card>
        </div>
      )}




      {/* Alert Dialog for Download Confirmation */}
  







    </div>
  );
}


export default FileUploadAndExportComponent;